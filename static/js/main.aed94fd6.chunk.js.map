{"version":3,"sources":["Circles.jsx","CircleSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["Circles","props","className","isCircleOneSelected","isCircleTwoSelected","isCircleThreeSelected","isCircleFourSelected","CircleSelector","onClick","toggleCircleOneSelector","toggleCircleTwoSelector","toggleCircleThreeSelector","toggleCircleFourSelector","App","setState","prevState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAaeA,G,MAXC,SAACC,GACb,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAWD,EAAME,oBAAsB,WAAa,gBAAzD,KACA,yBAAKD,UAAWD,EAAMG,oBAAsB,WAAa,gBAAzD,KACA,yBAAKF,UAAWD,EAAMI,sBAAwB,WAAa,gBAA3D,KACA,yBAAKH,UAAWD,EAAMK,qBAAuB,WAAa,gBAA1D,QCMGC,EAXQ,SAACN,GACpB,OACI,yBAAKC,UAAU,kBACX,4BAAQM,QAASP,EAAMQ,wBAAyBP,UAAWD,EAAME,oBAAsB,WAAa,gBAApG,mBACA,4BAAQK,QAASP,EAAMS,wBAAyBR,UAAWD,EAAMG,oBAAsB,WAAa,gBAApG,mBACA,4BAAQI,QAASP,EAAMU,0BAA2BT,UAAWD,EAAMI,sBAAwB,WAAa,gBAAxG,mBACA,4BAAQG,QAASP,EAAMW,yBAA0BV,UAAWD,EAAMK,qBAAuB,WAAa,gBAAtG,qBCwDGO,G,8DAzDb,aAAe,IAAD,8BACZ,gBASFJ,wBAA0B,WACxB,EAAKK,UAAS,SAAAC,GAAS,MACrB,CAAEZ,qBAAqB,EAAMC,qBAAqB,EAAOC,uBAAuB,EAAOC,sBAAsB,OAZnG,EAedI,wBAA0B,WACxB,EAAKI,UAAS,SAAAC,GAAS,MACrB,CAAEX,qBAAqB,EAAMD,qBAAqB,EAAOE,uBAAuB,EAAOC,sBAAsB,OAjBnG,EAoBdK,0BAA4B,WAC1B,EAAKG,UAAS,SAAAC,GAAS,MACrB,CAAEV,uBAAuB,EAAMF,qBAAqB,EAAOC,qBAAqB,EAAOE,sBAAsB,OAtBnG,EAyBdM,yBAA2B,WACzB,EAAKE,UAAS,SAAAC,GAAS,MACrB,CAAET,sBAAsB,EAAMH,qBAAqB,EAAOC,qBAAqB,EAAOC,uBAAuB,OAzB/G,EAAKW,MAAQ,CACXb,qBAAqB,EACrBC,qBAAqB,EACrBC,uBAAuB,EACvBC,sBAAsB,GANZ,E,qDA+BZ,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CACEC,oBAAqBc,KAAKD,MAAMb,oBAChCC,oBAAqBa,KAAKD,MAAMZ,oBAChCC,sBAAuBY,KAAKD,MAAMX,sBAClCC,qBAAsBW,KAAKD,MAAMV,qBACjCG,wBAAyBQ,KAAKR,wBAC9BC,wBAAyBO,KAAKP,wBAC9BC,0BAA2BM,KAAKN,0BAChCC,yBAA0BK,KAAKL,2BAEjC,kBAAC,EAAD,CACET,oBAAqBc,KAAKD,MAAMb,oBAChCC,oBAAqBa,KAAKD,MAAMZ,oBAChCC,sBAAuBY,KAAKD,MAAMX,sBAClCC,qBAAsBW,KAAKD,MAAMV,6B,GAlD3BY,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aed94fd6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Circles = (props) => {\n    return (\n        <div className='Circles'>\n            <div className={props.isCircleOneSelected ? 'selected' : 'not-selected'}>1</div>\n            <div className={props.isCircleTwoSelected ? 'selected' : 'not-selected'}>2</div>\n            <div className={props.isCircleThreeSelected ? 'selected' : 'not-selected'}>3</div>\n            <div className={props.isCircleFourSelected ? 'selected' : 'not-selected'}>4</div>\n        </div>\n    )\n}\n\nexport default Circles;","import React from 'react';\n\n\nconst CircleSelector = (props) => {\n    return (\n        <div className='CircleSelector'>\n            <button onClick={props.toggleCircleOneSelector} className={props.isCircleOneSelected ? 'selected' : 'not-selected'}>Select Circle 1</button>\n            <button onClick={props.toggleCircleTwoSelector} className={props.isCircleTwoSelected ? 'selected' : 'not-selected'}>Select Circle 2</button>\n            <button onClick={props.toggleCircleThreeSelector} className={props.isCircleThreeSelected ? 'selected' : 'not-selected'}>Select Circle 3</button>\n            <button onClick={props.toggleCircleFourSelector} className={props.isCircleFourSelected ? 'selected' : 'not-selected'}>Select Circle 4</button>\n        </div>\n    )\n}\n\nexport default CircleSelector;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Circles from './Circles'\nimport CircleSelector from './CircleSelector'\nimport './Circles.css'\nimport './CircleSelector.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isCircleOneSelected: true,\n      isCircleTwoSelected: false,\n      isCircleThreeSelected: false,\n      isCircleFourSelected: false,\n    }\n  }\n\n  toggleCircleOneSelector = () => {\n    this.setState(prevState => (\n      { isCircleOneSelected: true, isCircleTwoSelected: false, isCircleThreeSelected: false, isCircleFourSelected: false }\n    ));\n  }\n  toggleCircleTwoSelector = () => {\n    this.setState(prevState => (\n      { isCircleTwoSelected: true, isCircleOneSelected: false, isCircleThreeSelected: false, isCircleFourSelected: false }\n    ));\n  }\n  toggleCircleThreeSelector = () => {\n    this.setState(prevState => (\n      { isCircleThreeSelected: true, isCircleOneSelected: false, isCircleTwoSelected: false, isCircleFourSelected: false }\n    ));\n  }\n  toggleCircleFourSelector = () => {\n    this.setState(prevState => (\n      { isCircleFourSelected: true, isCircleOneSelected: false, isCircleTwoSelected: false, isCircleThreeSelected: false }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector\n            isCircleOneSelected={this.state.isCircleOneSelected}\n            isCircleTwoSelected={this.state.isCircleTwoSelected}\n            isCircleThreeSelected={this.state.isCircleThreeSelected}\n            isCircleFourSelected={this.state.isCircleFourSelected}\n            toggleCircleOneSelector={this.toggleCircleOneSelector}\n            toggleCircleTwoSelector={this.toggleCircleTwoSelector}\n            toggleCircleThreeSelector={this.toggleCircleThreeSelector}\n            toggleCircleFourSelector={this.toggleCircleFourSelector}\n          />\n          <Circles\n            isCircleOneSelected={this.state.isCircleOneSelected}\n            isCircleTwoSelected={this.state.isCircleTwoSelected}\n            isCircleThreeSelected={this.state.isCircleThreeSelected}\n            isCircleFourSelected={this.state.isCircleFourSelected}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}